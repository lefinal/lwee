"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2372],{4339:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=o(5893),a=o(1151);const i={},s="Command Action",r={id:"actions/command-action",title:"Command Action",description:"Command actions run a local command or application.",source:"@site/docs/actions/command-action.mdx",sourceDirName:"actions",slug:"/actions/command-action",permalink:"/lwee/actions/command-action",draft:!1,unlisted:!1,editUrl:"https://github.com/lefinal/lwee/docs/docs/actions/command-action.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Actions",permalink:"/lwee/actions/"},next:{title:"Image Action",permalink:"/lwee/actions/image-action"}},c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Logs and assertions",id:"logs-and-assertions",level:2},{value:"Templating",id:"templating",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"command-action",children:"Command Action"}),"\n",(0,t.jsx)(e.p,{children:"Command actions run a local command or application.\nThis should be avoided as much as possible.\nThe reason for this is that before running the same workflow on a different machine, you need to make sure that all dependencies are satisfied.\nYou also need to make sure that their versions match in case there were changes to the application between updates.\nEach application also needs to be configured correctly.\nLWEE was designed with the idea of being able to run the same workflow without issues on different machines.\nThus, allowing convenient reproducible and portable workflows.\nRunning locally available applications violates this principle."}),"\n",(0,t.jsx)(e.p,{children:"However, sometimes there are situations where you rely on local applications that where configured to run in a specific environment.\nIn this case, LWEE provides you with some ways to assist in making clear what was going on when a workflow was run."}),"\n",(0,t.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'type: command\n# The command to run. Required.\ncommand:\n  - "python3"\n  - "--version"\n# See sections below.\nlog: {}\n# See sections below.\nassert: {}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"logs-and-assertions",children:"Logs and assertions"}),"\n",(0,t.jsx)(e.p,{children:"Being able to understand how data was generated is crucial.\nWith containerized actions, you can see what operation was being run on the data.\nWith local applications, you manually need to log important information."}),"\n",(0,t.jsx)(e.p,{children:"LWEE allows you to run arbitrary commands and log their results in the output directory:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'logs:\n  # Name of the information to log.\n  pythonVersion:\n    # Command to run.\n    run:\n      - "python3"\n      - "--version"\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The information will be logged along with others in ",(0,t.jsx)(e.em,{children:"/out/run-info.yaml"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"flowName: My Simple Flow\nstart: 2023-11-17T19:44:02.037467359+01:00\nend: 2023-11-17T19:44:03.674546426+01:00\ntook: 1.637079067s\nactions:\n    # ...\n    myAction:\n        start: 2023-11-17T19:44:02.037651278+01:00\n        end: 2023-11-17T19:44:02.038923736+01:00\n        took: 1.272458ms\n        info: # Information will be logged here.\n            pythonVersion: |\n                Python 3.10.12\n"})}),"\n",(0,t.jsxs)(e.p,{children:["However, sometimes you may want to make certain assertions before running the workflow.\nThis may include version checks to make sure that a minimum version is installed or other conditions are met.\nAssertions can be configured via the ",(0,t.jsx)(e.code,{children:"assert"})," field:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'assert:\n  # Name of the assertion.\n  versionMatches:\n    # Command to run.\n    run:\n      - "python3"\n      - "--version"\n    # Comparison method to use.\n    should: equal\n    # Value used for equality comparison.\n    target: "Python 3.10.12"\n'})}),"\n",(0,t.jsx)(e.p,{children:"Available comparison methods:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"contain"}),": Asserts that the target substring is found in the command output."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"equal"}),": Asserts that the command output is equal to the target after trimmed line-breaks."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"match-regex"}),": Asserts that the command output matches the regular expression in target after trimmed line-breaks.\nThe regular expression must be in ",(0,t.jsx)(e.a,{href:"https://pkg.go.dev/regexp/syntax",children:"Go regexp syntax"}),"."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"templating",children:"Templating"}),"\n",(0,t.jsx)(e.p,{children:"Additional available fields:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:".Action.Extras.WorkspaceDir"}),": Temporary directory on the host that can be used for file storage/exchange."]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},1151:(n,e,o)=>{o.d(e,{Z:()=>r,a:()=>s});var t=o(7294);const a={},i=t.createContext(a);function s(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);