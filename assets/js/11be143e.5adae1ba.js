"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9135],{7204:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(5893),i=t(1151);const o={sidebar_position:10},s="Concepts",r={id:"concepts",title:"Concepts",description:"LWEE is - as the name suggests - a workflow execution engine.",source:"@site/docs/concepts.mdx",sourceDirName:".",slug:"/concepts",permalink:"/lwee/concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/lefinal/lwee/docs/docs/concepts.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/lwee/"},next:{title:"Usage",permalink:"/lwee/usage"}},c={},l=[{value:"Flow",id:"flow",level:2},{value:"Actions",id:"actions",level:2},{value:"Flow and Action IO",id:"flow-and-action-io",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"concepts",children:"Concepts"}),"\n",(0,a.jsx)(n.p,{children:"LWEE is - as the name suggests - a workflow execution engine."}),"\n",(0,a.jsx)(n.h2,{id:"flow",children:"Flow"}),"\n",(0,a.jsxs)(n.p,{children:["Center is a flow definition that describes various inputs and outputs as well as actions that perform operations on these.\nFlows are described in ",(0,a.jsx)(n.a,{href:"https://yaml.org/",children:"YAML"}),".\nA small workflow may look like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"name: People analytics\ndescription: Reads a CSV file with columns 'name' and 'age' and outputs statistics.\n\nin:\n  csvData:\n    providedAs: file\n    filename: src/people.txt\n\nactions:\n  extractAges:\n    description: Extracts ages from CSV and outputs them, separated by line breaks.\n    in:\n      csv:\n        source: flow.in.csvData\n        provideAs: workspace-file\n        filename: data.csv\n    run:\n      type: proj-action\n      name: extract-age\n    out:\n      agesOnly:\n        providedAs: workspace-file\n        filename: ages.txt\n\n  minAge:\n    description: Takes ages, separated by line breaks, and outputs the minimum.\n    in:\n      ages:\n        source: action.extractAges.out.agesOnly\n        provideAs: stdin\n    run:\n      type: image\n      image: my-repository:tag\n    out:\n      min:\n        providedAs: stdout\n\n  averageAge:\n    description: Takes ages, separated by line breaks, and outputs the average.\n    in:\n      ages:\n        source: action.extractAges.out.agesOnly\n        provideAs: stream\n        streamName: numbers\n    run:\n      type: proj-action\n      name: average\n    out:\n      avg:\n        providedAs: stream\n        streamName: average\n\nout:\n  minAge:\n    source: action.minAge.out.min\n    provideAs: file\n    filename: out/minimum-age.txt\n  averageAge:\n    source: action.averageAge.out.avg\n    provideAs: file\n    filename: out/average-age.txt\n"})}),"\n",(0,a.jsx)(n.p,{children:"Visualized, the flow looks like this:"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TD;\n    subgraph flow.in["Flow Inputs"]\n        flow.in.csvData["CSV Data"]\n    end\n\n    subgraph action.extractAges["`Action: _Extract Ages_`"]\n        action.extractAges.in.csv["`Input: _csv_`"]\n        action.extractAges.run["`Run Project Action`"]\n        action.extractAges.out.csv["`Output: _agesOnly_`"]\n\n        action.extractAges.in.csv --\x3e action.extractAges.run\n        action.extractAges.run --\x3e action.extractAges.out.csv\n    end\n\n    subgraph action.minAge["`Action: _minAge_`"]\n        action.minAge.in.ages["`Input: _ages_`"]\n        action.minAge.run["`Run Image`"]\n        action.minAge.out.min["`Output: _min_`"]\n\n        action.minAge.in.ages --\x3e action.minAge.run\n        action.minAge.run --\x3e action.minAge.out.min\n    end\n\n    subgraph action.averageAge["`Action: _averageAge_`"]\n        action.averageAge.in.ages["`Input: _ages_`"]\n        action.averageAge.run["`Run Project Action`"]\n        action.averageAge.out.avg["`Output: _avg_`"]\n\n        action.averageAge.in.ages --\x3e action.averageAge.run\n        action.averageAge.run --\x3e action.averageAge.out.avg\n    end\n\n    subgraph flow.out["Flow Outputs"]\n        flow.out.minAge["minAge"]\n        flow.out.averageAge["averageAge"]\n    end\n\n    flow.in.csvData --\x3e action.extractAges.in.csv\n    action.extractAges.out.csv --\x3e action.minAge.in.ages\n    action.extractAges.out.csv --\x3e action.averageAge.in.ages\n    action.minAge.out.min --\x3e flow.out.minAge\n    action.averageAge.out.avg --\x3e flow.out.averageAge'}),"\n",(0,a.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,a.jsx)(n.p,{children:"Actions perform arbitrary operations on data.\nThe recommended way is using container images.\nThis bundles all required dependencies and allows reproducible operations.\nLocally installed applications require more effort to be used.\nThey need to be installed and set up along with their dependencies.\nOne also needs to make sure that the correct version is installed in case of changes due to application updates.\nAdditionally, features might depend on the host operating system."}),"\n",(0,a.jsx)(n.p,{children:"LWEE provides you with three forms of actions."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Project actions"}),"\n",(0,a.jsx)(n.li,{children:"External container images"}),"\n",(0,a.jsx)(n.li,{children:"Local commands"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Project actions are the recommended way to use actions.\nThey consist of source code within the LWEE project as well as a ",(0,a.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/",children:"Dockerfile"}),", used to build a container image.\nRead more about actions in the ",(0,a.jsx)(n.a,{href:"/lwee/actions/",children:"Actions section"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"flow-and-action-io",children:"Flow and Action IO"}),"\n",(0,a.jsx)(n.p,{children:"Actions and the flow itself allow ingesting and extracting data.\nEach action describes its required inputs and provided outputs.\nLWEE handles the data transmission inbetween."}),"\n",(0,a.jsx)(n.p,{children:"Once output data comes available, the transmission is opened.\nData is then transmitted to the recipient.\nIn practice, an action is not being started until all required inputs become available.\nThis results in the actions forming a directed graph."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"No cycles are allowed for action IO."})}),"\n",(0,a.jsxs)(n.p,{children:["Read more about action IO in ",(0,a.jsx)(n.a,{href:"/lwee/action-io",children:"this"})," section."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(7294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);