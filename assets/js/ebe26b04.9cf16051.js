"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9866],{1758:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=e(5893),i=e(1151);const s={sidebar_position:70},r="Streams",o={id:"streams",title:"Streams",description:"Streams in LWEE allow data exchange over HTTP communication.",source:"@site/docs/streams.mdx",sourceDirName:".",slug:"/streams",permalink:"/lwee/streams",draft:!1,unlisted:!1,editUrl:"https://github.com/lefinal/lwee/docs/docs/streams.mdx",tags:[],version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70},sidebar:"tutorialSidebar",previous:{title:"File",permalink:"/lwee/flow-outputs/file"},next:{title:"Go SDK",permalink:"/lwee/go-sdk"}},u={},d=[{value:"Target HTTP endpoints",id:"target-http-endpoints",level:2},{value:"Connection and verification",id:"connection-and-verification",level:3},{value:"Ingest input data to target",id:"ingest-input-data-to-target",level:3},{value:"Read output data from target",id:"read-output-data-from-target",level:3},{value:"Shutdown",id:"shutdown",level:3}];function c(t){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"streams",children:"Streams"}),"\n",(0,a.jsx)(n.p,{children:"Streams in LWEE allow data exchange over HTTP communication.\nLWEE supports multiple data streams at once.\nStreams are also the goto way of building SDKs.\nEach one has a name and can be either an input or output."}),"\n",(0,a.jsxs)(n.p,{children:["When declaring inputs for an action with ",(0,a.jsx)(n.a,{href:"/lwee/action-inputs/stream",children:"stream type"}),", you specify the stream name as the operation expects it.\nStream names in outputs with ",(0,a.jsx)(n.a,{href:"/lwee/action-outputs/stream",children:"stream type"})," need to match the stream name as the operator provides it."]}),"\n",(0,a.jsx)(n.p,{children:"In practice the mapping looks like this:"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TD\n    subgraph action.prev["Other action"]\n        action.prev.output.a["`_Out: A_`"]\n        action.prev.output.b["`_Out: B_`"]\n    end\n\n    subgraph action.main["Action with streams"]\n        action.main.input.a["`_In: A_`"]\n        action.main.input.b["`_In: B_`"]\n\n        subgraph action.main.run["Operation"]\n            subgraph action.main.run.streams.in["Requested input streams"]\n                action.main.run.stream.input.alpha["alpha"]\n                action.main.run.stream.input.beta["beta"]\n            end\n\n            action.main.run.operation["Operation"]\n\n            subgraph action.main.run.streams.out["Provided output streams"]\n                action.main.run.stream.output.gamma["gamma"]\n                action.main.run.stream.output.delta["delta"]\n                action.main.run.stream.output.theta["theta"]\n            end\n        end\n\n        action.main.out.a["`_Out: A_`"]\n        action.main.out.b["`_Out: B_`"]\n    end\n\n    subgraph action.next["Other action"]\n        action.next.input.a["`_In: A_`"]\n        action.next.input.b["`_In: B_`"]\n    end\n\n    action.prev.output.a --\x3e action.main.input.a\n    action.prev.output.b --\x3e action.main.input.b\n\n    action.main.input.a -- "streamName: alpha" --\x3e action.main.run.stream.input.alpha\n    action.main.input.b -- "streamName: beta" --\x3e action.main.run.stream.input.beta\n    action.main.run.streams.in --\x3e action.main.run.operation\n    action.main.run.operation --\x3e action.main.run.streams.out\n    action.main.run.stream.output.gamma -- "streamName: gamma" --\x3e action.main.out.a\n    action.main.run.stream.output.delta -- "streamName: delta" --\x3e action.main.out.b\n\n    action.main.out.a --\x3e action.next.input.a\n    action.main.out.b --\x3e action.next.input.b'}),"\n",(0,a.jsxs)(n.p,{children:["As with action IO, not all provided output streams need to be used by action outputs.\nIn this case ",(0,a.jsx)(n.em,{children:"theta"})," remains unused and will be drained by LWEE."]}),"\n",(0,a.jsx)(n.h2,{id:"target-http-endpoints",children:"Target HTTP endpoints"}),"\n",(0,a.jsx)(n.p,{children:"LWEE expects the client to open an HTTP API at port 17733 and to provide multiple HTTP endpoints."}),"\n",(0,a.jsx)(n.p,{children:"HTTP buffer size is 1MB."}),"\n",(0,a.jsx)(n.h3,{id:"connection-and-verification",children:"Connection and verification"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET http://<target>/api/v1/io\n"})}),"\n",(0,a.jsx)(n.p,{children:"Upon startup, LWEE will request an IO summary from the target.\nIf the connection fails, LWEE will retry periodically until the connection succeeds or a timeout occurs."}),"\n",(0,a.jsxs)(n.p,{children:["The target is expected to return a ",(0,a.jsx)(n.strong,{children:"200"})," status code with the following JSON encoded response data:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "requested_input_streams": [],\n  "provided_output_streams": []\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"requested_input_streams"}),": List of strings with the names of the requested input streams."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"provided_output_streams"}),": List of strings with the names of the provided output streams."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"ingest-input-data-to-target",children:"Ingest input data to target"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"POST http://<target>/api/v1/io/input/<stream_name>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["LWEE will transmit all the input's data over the body.\nThe target is expected to return a ",(0,a.jsx)(n.strong,{children:"200"})," status code."]}),"\n",(0,a.jsx)(n.h3,{id:"read-output-data-from-target",children:"Read output data from target"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET http://<target>/api/v1/io/output/<stream_name>\n"})}),"\n",(0,a.jsx)(n.p,{children:"LWEE will attempt to read output data from the target with this request.\nThe target is expected to return one of the following status codes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"202"}),": Output is not ready yet.\nLWEE will retry with cooldown.\nIt is recommended to block until the output is ready.\nThis is because LWEE will skip the cooldown after the first unsuccessful attempt."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"200"}),": Output data is ready.\nThe target should transmit the data in the response body.\nThis endpoint may be called multiple times and therefore transmitting data in multiple chunks.\nAs long as 200 is returned, LWEE will call this endpoint again and forward any transmitted data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"204"}),": Output stream is closed.\nReturn this status code when you have finished transmitting data."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"shutdown",children:"Shutdown"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"POST http://<target>/api/v1/shutdown\n"})}),"\n",(0,a.jsxs)(n.p,{children:["LWEE will instruct the target to shut down manually.\nThe target is expected to respond with a ",(0,a.jsx)(n.strong,{children:"200"})," status code.\nThen, after ensuring the HTTP communication to have finished, it should shut down."]})]})}function l(t={}){const{wrapper:n}={...(0,i.a)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}},1151:(t,n,e)=>{e.d(n,{Z:()=>o,a:()=>r});var a=e(7294);const i={},s=a.createContext(i);function r(t){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),a.createElement(s.Provider,{value:n},t.children)}}}]);